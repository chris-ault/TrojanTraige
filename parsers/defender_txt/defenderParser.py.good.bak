import mysql.connector
import re
#from mysql.connector import errorcode
#from mysql.connector.errors import Error
#
#
# TODO:
# Enumerate Severity and type id
# https://docs.microsoft.com/en-us/previous-versions/windows/desktop/defender/msft-mpthreat
#

# File to import from
defenderOutput = "VirusShare_Mediyes_000.txt"
print "Starting processing of :" + defenderOutput

mydb = mysql.connector.connect(
    host="localhost",
    user="user",
    passwd="password",
    database="malwareDB"
)
mycursor = mydb.cursor()
catID = ["invalid", "adware", "spyware",
         "passwordstealer", "trojandownloader",
         "worm", "backdoor",
         "remoteaccesstrojan",
         "trojan", "emailflooder",
         "KEYLOGGER", "DIALER", "MONITORINGSOFTWARE",
         "BROWSERMODIFIER", "COOKIE",
         "BROWSERPLUGIN", "AOLEXPLOIT",
         "NUKER", "SECURITYDISABLER"
         "JOKEPROGRAM", "HOSTILEACTIVEXCONTROL",
         "SOFTWAREBUNDLER", "STEALTHNOTIFIER",
         "SETTINGSMODIFIER", "TOOLBAR",
         "REMOTECONTROLSOFTWARE", "TROJANFTP",
         "POTENTIALUNWANTEDSOFTWARE", "ICQEXPLOIT",
         "TROJANTELNET", "FILESHARINGPROGRAM",
         "MALWARE_CREATION_TOOL", "REMOTE_CONTROL_SOFTWARE",
         "TOOL", "TROJAN_DENIALOFSERVICE",
         "TROJAN_DROPPER", "TROJAN_MASSMAILER",
         "TROJAN_MONITORINGSOFTWARE", "TROJAN_PROXYSERVER",
         "VIRUS", "KNOWN", "UNKNOWN", "SPP",
         "BEHAVIOR", "VULNERABILTIY", "POLICY"
         ]
#types = ["Known Bad", "Behavior", "Unknown", "Known Good", "NRI"]
#severities = ["Unknown","Low","Moderate","High","Severe"]


def checkHash(hashToTest):
    return (len(hashToTest) == 32)


entry = 0
fileHashes = []
fileLocations = []
with open(defenderOutput) as fp:
    # print "Element #:" + str(entry)
    for line in fp:
            parts = [line[:16].strip(), line[19:].strip()]
            # print parts[0:]
            # The front part is empty
            if not len(parts[0]) and len(parts[1]) and (len(parts[1]) > 5):
                # This is part of a multi-line value
                fileLocation = line.strip().strip(",").strip("...}")
                # Hash Splits on last underscore and ignores lines with ->...etc
                # Attempt to Handle containers with children files with underscores
                testHash = fileLocation.rsplit('_', 1)[1].split("-")[0].strip("}")
                if checkHash(testHash):
                    fileHashes.append(fileLocation.rsplit('_', 1)[1].split("-")[0].strip("}"))
                else:
                    fileHashes.append(fileLocation.rsplit('_', 2)[1].split("-")[0].strip("}"))
                fileLocations.append(fileLocation)

            else:
                if parts[0].strip() == "CategoryID":
                    # Store Category ID
                    if int(parts[1]) > 47:
                        category = "undefined"
                    else:
                        category = catID[int(parts[1])]
                        # print category
                if parts[0].strip() == "Resources":
                    fileLocation1 = parts[1].strip().strip('{').strip(',').strip("}")
                    fileLocations.append(fileLocation1)
                    fileHashes.append(fileLocation1.split('_', 2)[-1].split("-")[0])
                if parts[0].strip() == "RollupStatus":
                    curRollup = parts[1].strip()
                    # print "Roll up " + parts[1].strip()
                if parts[0].strip() == "SchemaVersion":
                    curSchema = parts[1].strip()
                    # print "schema " + parts[1].strip()
                if parts[0].strip() == "SeverityID":
                    curSeverity = parts[1].strip()
                    # print 'Severity ' + parts[1].strip()
                if parts[0].strip() == "ThreatID":
                    curID = parts[1].strip()
                    # print "ThreatID " + parts[1].strip()
                if parts[0].strip() == "ThreatName":
                    # print "Threat name is " + parts[1].strip()
                    threatName = parts[1].split(':')
                    temp = threatName[1].split('/')
                    OS = temp[0].strip()
                    threatSub = temp[1].strip()
                    threatType = threatName[0].strip()
                    # print "Os:" + OS + " type:" + threatType + " subtype:" /
                    #     + threatSub
                    entry = entry + 1
                    print "Element #:" + str(entry)
                    i = 0
                    for i in range(len(fileHashes)):
                        if checkHash(fileHashes[i]):
                            pass
                            #print "Vars: " + str((curSeverity, threatType, OS, category, curRollup, curSchema, curID))
                            print ("hash:",fileHashes[i], "location:", fileLocations[i])
                            # raw_input()
                            # sql = "INSERT INTO malware (severity, type, OS, CategoryID, Rollupstatus, Schemaversion, threatID, HASH, Location, subType) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
                            # val = (curSeverity, threatType, OS, category, curRollup, curSchema, curID, fileHashes[i], fileLocations[i], threatSub)
                            # try:
                            #     mycursor.execute(sql, val)
                            #     mydb.commit()
                            #     print(mycursor.rowcount, " hash record inserted.")                        
                            # except mysql.connector.Error as err:
                            #     print err.msg
                            #     print fileHashes[i] + " Already exists"
                            #raw_input()
                        else:
                            print "Bad hash, not even trying " + str(fileHashes[i]) + "is " + str(len(fileHashes[i]))
                    del fileHashes[:]
                    del fileLocations[:]

fp.close()
